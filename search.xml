<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Kotlin Puzzlers 改]]></title>
      <url>/2017/12/28/kotlin-puzzlers/</url>
      <content type="html"><![CDATA[<p>《Java Puzzlers》（中文名《Java 解惑》）里面讲解了许多 Java 语言的大坑，相信各位julao应该都看过。Kotlin 作为「a better Java」，在填补一些坑的同时，不可避免地引入了许多新坑。<a id="more"></a>本来本鶸进行了一段时间的取材，想要写一篇《Kotlin Puzzlers》的，可谁知 已经有人早就把我的饭碗抢走了，而且素材比我还多，可恶！</p>
<p>这篇文章就是本鶸看完录像（油土鳖上面有）以及 Github 上的完整内容后，将一些比较坑的谜题拿出来报复社会，蛐蛐一篇观后感而已。</p>
<p>题型为选择题，本辣鸡博客没有NGA的折叠，没有萌百的黑幕，为了不让一眼瞄到答案而造成剧透，本文对答案（以及解释）的摆放位置做了调整，例如第一题的答案被我放在了第二题的位置（以此类推）。各位看客从上到下开始阅读就好了。</p>
<p>使用的 Kotlin 版本为1.2。</p>
<h1 id="没有坑到我的谜题"><a href="#没有坑到我的谜题" class="headerlink" title="没有坑到我的谜题"></a>没有坑到我的谜题</h1><p>虽然没有被坑，比较简单，但是值得注意的题。一些更加简单的题目就不放上来了。想刷一遍完整题库的同学可以到 GitHub 上面找。</p>
<h2 id="强力返回-Power-Return"><a href="#强力返回-Power-Return" class="headerlink" title="强力返回 ~ Power Return"></a>强力返回 ~ Power Return</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span>
  <span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token keyword">return</span> <span class="token keyword">throw</span> <span class="token keyword">return</span> <span class="token string">"Hello"</span>
  <span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">println</span><span class="token punctuation">(</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<pre><code>这会打印出什么？
a) Hello
b) 两个Hello
c) 这破代码根本没法通过编译
d) 以上答案都不对
</code></pre><p>本题答案（以及解释）在下一题那里。（以此类推）</p>
<h2 id="计划生育-One-Chile-Policy"><a href="#计划生育-One-Chile-Policy" class="headerlink" title="计划生育 ~ One Chile Policy"></a>计划生育 ~ One Chile Policy</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">open</span> <span class="token keyword">class</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">fun</span> <span class="token function">lookup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> Parent <span class="token operator">:</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token string">"parent"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">fun</span> <span class="token function">child</span><span class="token punctuation">(</span>name<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> Node<span class="token operator">?</span> <span class="token operator">=</span> <span class="token function">Node</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>

  <span class="token keyword">val</span> child1 <span class="token operator">=</span> <span class="token function">child</span><span class="token punctuation">(</span><span class="token string">"child1"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span> <span class="token function">lookup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
  <span class="token keyword">val</span> child2 <span class="token operator">=</span> <span class="token function">child</span><span class="token punctuation">(</span><span class="token string">"child2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span> <span class="token function">lookup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<pre><code>这会打印出什么？
a) child1 和 child2
b) child1 和 parent
c) parent 和 child2
d) 以上答案都不对
</code></pre><p>上一题的答案：a</p>
<p>要记住，<code>return ***</code> 和 <code>throw ***</code> 都是表达式，其结果的类型为 <code>Nothing</code>，<code>Nothing</code> 类型是任意类型的子类型，所以 <code>Nothing</code> 可以被抛出，可以被返回，可以赋值给任意类型的变量。事实上 <code>hello()</code> 在 <code>return &quot;Hello&quot;</code> 的时候已经结束了，剩下的 <code>throw</code>、<code>val result</code>、<code>println()</code> 什么的都是不可到达代码（unreachable code），不会被运行。</p>
<p>PS：你甚至可以写出这样的代码：<code>throw throw throw Exception()</code></p>
<h2 id="两只拉姆达跑得快-Two-Lambda"><a href="#两只拉姆达跑得快-Two-Lambda" class="headerlink" title="两只拉姆达跑得快 ~ Two Lambda"></a>两只拉姆达跑得快 ~ Two Lambda</h2><pre class=" language-kotlin"><code class="language-kotlin">typealias L <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> <span class="token operator">-></span> Unit

<span class="token keyword">fun</span> <span class="token function">foo</span><span class="token punctuation">(</span>one<span class="token operator">:</span> L <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> two<span class="token operator">:</span> L <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">one</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">)</span>
  <span class="token function">two</span><span class="token punctuation">(</span><span class="token string">"two"</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

foo <span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<pre><code>这会打印出什么？
a) oneone
b) twotwo
c) onetwo
d) 以上答案都不对
</code></pre><p>上一题的答案：d</p>
<p>事实上是 <code>child1</code> 和 <code>parent</code>。<code>Kotlin</code> 的这些扩展方法如 <code>apply</code>、<code>let</code>、<code>also</code> 等等都是适用于所有类型的，包括可空类型。<code>child2</code> 那行 <code>apply</code> 函数接收的拉姆达表达式的类型其实是 <code>Node?.() -&gt; Unit</code>，如果 <code>child2</code>那行代码是写在 <code>Parent</code> 类的外面的话，你就会发现这行代码根本没法通过编译，这里面调用的 <code>lookup</code> 实际上是 <code>parent</code> 的 <code>lookup</code>。（你可以把 <code>apply</code> 换成 <code>also</code> 试试。）</p>
<h2 id="衔尾蛇-Cyclic-Object-Constructions"><a href="#衔尾蛇-Cyclic-Object-Constructions" class="headerlink" title="衔尾蛇 ~ Cyclic Object Constructions"></a>衔尾蛇 ~ Cyclic Object Constructions</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">open</span> <span class="token keyword">class</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token keyword">val</span> x<span class="token operator">:</span> Any<span class="token operator">?</span><span class="token punctuation">)</span>

<span class="token keyword">object</span> B <span class="token operator">:</span> <span class="token function">A</span><span class="token punctuation">(</span>C<span class="token punctuation">)</span>
<span class="token keyword">object</span> C <span class="token operator">:</span> <span class="token function">A</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span>

<span class="token function">print</span><span class="token punctuation">(</span>B<span class="token punctuation">.</span>x<span class="token punctuation">)</span>
<span class="token function">print</span><span class="token punctuation">(</span>C<span class="token punctuation">.</span>x<span class="token punctuation">)</span>
</code></pre>
<pre><code>这会打印出什么？
a) nullnull
b) C@********null
c) ExceptionInInitializerError
d) 这破代码根本没法通过编译
</code></pre><p>上一题的答案：d</p>
<p>实际上是 <code>twoone</code>。第一句的语法只有在拉姆达表达式是最后一个参数的时候才能写的，所以是 <code>two</code>。第二句是普通的方法调用，先填上第一个参数，第二个参数使用默认值。</p>
<p>PS：想要朴素地实现 <code>foo { } { }</code> 这样的调用的话应该是办不到的吧。(如果能做到请赶快告诉我！)</p>
<h2 id="哇，好长-Breaking-Lines"><a href="#哇，好长-Breaking-Lines" class="headerlink" title="哇，好长 ~ Breaking Lines"></a>哇，好长 ~ Breaking Lines</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> anExtremelyLongAndBoringStatementThatBarelyFitsOnALine <span class="token operator">=</span> <span class="token number">2</span>
<span class="token keyword">val</span> anotherExtremelyLongStatementThatBarelyFitsOnALine <span class="token operator">=</span> <span class="token number">2</span>
<span class="token keyword">val</span> someList <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">val</span> result <span class="token operator">=</span> someList<span class="token punctuation">.</span><span class="token function">map</span> <span class="token punctuation">{</span>
        anExtremelyLongAndBoringStatementThatBarelyFitsOnALine
            <span class="token operator">+</span> anotherExtremelyLongStatementThatBarelyFitsOnALine
<span class="token punctuation">}</span>
<span class="token function">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
</code></pre>
<pre><code>这会打印出什么？
a) [1]
b) [2]
c) [4]
d) [1, 4]
</code></pre><p>上一题的答案：b</p>
<p><code>B</code> 初始化需要 <code>C</code>，<code>C</code> 初始化需要 <code>B</code>。咦，<code>B</code> 还没初始化完成呢，那么哪来的 <code>B</code> 呢，只能是 <code>null</code> 了啊！</p>
<p>参见 <a href="http://jetbrains.github.io/kotlin-spec/#_singleton_objects" target="_blank" rel="external">http://jetbrains.github.io/kotlin-spec/#_singleton_objects</a></p>
<h2 id="换个名字你就不认识我了-Good-Child-Has-Many-Names"><a href="#换个名字你就不认识我了-Good-Child-Has-Many-Names" class="headerlink" title="换个名字你就不认识我了 ~ Good Child Has Many Names"></a>换个名字你就不认识我了 ~ Good Child Has Many Names</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">open</span> <span class="token keyword">class</span> C <span class="token punctuation">{</span>
  <span class="token keyword">open</span> <span class="token keyword">fun</span> <span class="token function">sum</span><span class="token punctuation">(</span>x<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token operator">=</span> x <span class="token operator">+</span> y
<span class="token punctuation">}</span>

<span class="token keyword">class</span> D <span class="token operator">:</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">sum</span><span class="token punctuation">(</span>y<span class="token operator">:</span> Int<span class="token punctuation">,</span> x<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">val</span> d<span class="token operator">:</span> D <span class="token operator">=</span> <span class="token function">D</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">val</span> c<span class="token operator">:</span> C <span class="token operator">=</span> d
<span class="token function">print</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token function">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<pre><code>这会打印出什么？
a) 22
b) 11
c) 21
d) 这破代码根本没法通过编译
</code></pre><p>上一题的答案：b</p>
<p>之前裙里有julao问过类似的问题所以我没被坑到。你可以把代码丢到IDEA里面，光标定位到加号前面，按下 <code>Ctrl+B</code> 或者 <code>Ctrl+Q</code>，看看那个加号是什么意思吧。解决方法：把加号放在上一行的后面可破。</p>
<h2 id="排序-Sorting"><a href="#排序-Sorting" class="headerlink" title="排序 ~ Sorting"></a>排序 ~ Sorting</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> list <span class="token operator">=</span> <span class="token function">arrayListOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>

<span class="token keyword">val</span> sortedList <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token function">print</span><span class="token punctuation">(</span>sortedList<span class="token punctuation">)</span>
</code></pre>
<pre><code>这会打印出什么？
a) [1, 5, 3, 2, 4]
b) [1, 2, 3, 4, 5]
c) kotlin.Unit
d) 这破代码根本没法通过编译
</code></pre><p>上一题的答案：c</p>
<p>命名参数是静态分配的。</p>
<h2 id="致命的顺序-The-Order"><a href="#致命的顺序-The-Order" class="headerlink" title="致命的顺序 ~ The Order"></a>致命的顺序 ~ The Order</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> Order <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">val</span> c<span class="token operator">:</span> String
  <span class="token keyword">init</span> <span class="token punctuation">{</span>
    <span class="token function">the</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    c <span class="token operator">=</span> <span class="token string">""</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">the</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<pre><code>这会打印出什么？
a) 0
b) null
c) 这破代码根本没法通过编译
d) 以上答案都不对
</code></pre><p>上一题的答案：c</p>
<p>参见 <a href="https://zhuanlan.zhihu.com/p/27234651" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/27234651</a></p>
<p>本题的答案：d</p>
<p>JVM 不想理你并向你抛出了一只 NPE。Java 也有这个问题，Scala 不熟悉不清楚。据说 Ceylon 就没有这个问题，具体可以看 Ceylon 官网上的说明（趁机吹一波 Ceylon）。</p>
<p><a href="https://ceylon-lang.org/documentation/1.3/tour/initialization/#definite_assignment_and_definite_initialization" target="_blank" rel="external">https://ceylon-lang.org/documentation/1.3/tour/initialization/#definite_assignment_and_definite_initialization</a></p>
<p>Kotlin 官方人员曾表示修复这个缺陷是一件十分困难的事。</p>
<h1 id="那些坑了我的迷题"><a href="#那些坑了我的迷题" class="headerlink" title="那些坑了我的迷题"></a>那些坑了我的迷题</h1><p>我果然是鶸，错了这么多，进入自卑模式~</p>
<h2 id="区间测试-Inclusive-Range"><a href="#区间测试-Inclusive-Range" class="headerlink" title="区间测试 ~ Inclusive Range"></a>区间测试 ~ Inclusive Range</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> i <span class="token operator">=</span> <span class="token number">10.5</span>

<span class="token keyword">when</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">10</span> <span class="token operator">-></span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"in"</span><span class="token punctuation">)</span>
  <span class="token operator">!</span><span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">10</span> <span class="token operator">-></span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"!in"</span><span class="token punctuation">)</span>
  <span class="token keyword">else</span> <span class="token operator">-></span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"else"</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre>
<pre><code>这会打印出什么？
a) in
b) !in
c) else
d) 这破代码根本没法通过编译
</code></pre><p>据说这道题在 Kotlin 1.0 版本和 1.2 版本里有不同的表现。（我懒得试旧版本了）</p>
<h2 id="极性不定-Weird-Chaining"><a href="#极性不定-Weird-Chaining" class="headerlink" title="极性不定 ~ Weird Chaining"></a>极性不定 ~ Weird Chaining</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">printNumberSign</span><span class="token punctuation">(</span>num<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token string">"negative"</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token string">"positive"</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token string">"zero"</span>
  <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span> <span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">printNumberSign</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token function">printNumberSign</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token function">printNumberSign</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
</code></pre>
<pre><code>这会打印出什么？
a) negative; zero; positive
b) negative; zero
c) negative; positive
d) zero; positive
</code></pre><p>上一题的答案：a</p>
<p>实际上是把 <code>i</code> 转成 <code>Int</code> 再进行的比较。</p>
<h2 id="Dollar-In-Multiline-Literals"><a href="#Dollar-In-Multiline-Literals" class="headerlink" title="$_$ ~ Dollar In Multiline Literals"></a>$_$ ~ Dollar In Multiline Literals</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> multiline <span class="token operator">=</span> <span class="token raw-string string">"""
        To win \<span class="token interpolation variable">$999</span>.999 execute "rm -fr \<span class="token interpolation variable">$HOME</span>/kotlin-puzzlers/*"
        """</span><span class="token punctuation">.</span><span class="token function">trimIndent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token function">println</span><span class="token punctuation">(</span>multiline<span class="token punctuation">)</span>
</code></pre>
<pre><code>这会打印出什么？
a) To win \$999.999 execute &quot;rm -fr \$HOME/kotlin-puzzlers/*&quot;
b) To win 999.999 execute &quot;rm -fr \/home/user/kotlin-puzzlers/*&quot;
c) To win $999.999 execute &quot;rm -fr $HOME/kotlin-puzzlers/*&quot;
d) 这破代码根本没法通过编译
</code></pre><p>上一题的答案：d</p>
<p>相当于：</p>
<pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token string">"negative"</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token string">"positive"</span> <span class="token punctuation">}</span>
  <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token string">"zero"</span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span> <span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>秒懂！</p>
<p>解决方法：用小括号将那串 <code>if else</code> 括起来再接 <code>let</code> 可破。</p>
<h2 id="你的名字是-Property-Override"><a href="#你的名字是-Property-Override" class="headerlink" title="你的名字是 ~ Property Override"></a>你的名字是 ~ Property Override</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">open</span> <span class="token keyword">class</span> Named <span class="token punctuation">{</span>
  <span class="token keyword">open</span> <span class="token keyword">var</span> name<span class="token operator">:</span> String<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> field <span class="token operator">?:</span> <span class="token string">"&lt;unnamed>"</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> Person<span class="token operator">:</span> <span class="token function">Named</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">override</span> <span class="token keyword">var</span> name<span class="token operator">:</span> String<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span>name
    <span class="token keyword">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span> field <span class="token operator">=</span> <span class="token string">"Mr <span class="token interpolation variable">$value</span>"</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">val</span> person <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Anton"</span>
<span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
</code></pre>
<pre><code>这会打印出什么？
a) Anton
b) Mr Anton
c) &lt;unnamed&gt;
d) null
</code></pre><p>上一题的答案：d</p>
<p>这种 raw string 里面美元符号 <code>$</code> 一直都是表示模板表达式，而且不能被转义，所以 <code>$HOME</code> 这里糟了。（你问为什么 <code>$999.999</code> 没糟？因为 <code>999.999</code> 不是合法的变量名啊，你在 <code>999.999</code> 两边加上反引号试试。）</p>
<p>解决方法：”””${‘$’}HOME”””</p>
<h2 id="冰雪聪明-Custom-Getter-Smartcast"><a href="#冰雪聪明-Custom-Getter-Smartcast" class="headerlink" title="冰雪聪明 ~ Custom Getter Smartcast"></a>冰雪聪明 ~ Custom Getter Smartcast</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> SmartCastable <span class="token punctuation">{</span>
    <span class="token keyword">val</span> list<span class="token operator">:</span> List<span class="token operator">&lt;</span>Int<span class="token operator">></span> <span class="token operator">=</span> <span class="token function">mutableListOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>

    <span class="token keyword">val</span> <span class="token keyword">set</span><span class="token operator">:</span> Set<span class="token operator">&lt;</span>Int<span class="token operator">></span> <span class="token operator">=</span> <span class="token function">mutableSetOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
         <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> field
<span class="token punctuation">}</span>

<span class="token keyword">val</span> sc <span class="token operator">=</span> <span class="token function">SmartCastable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">if</span><span class="token punctuation">(</span>sc<span class="token punctuation">.</span>list <span class="token keyword">is</span> MutableList<span class="token punctuation">)</span>
    sc<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>

<span class="token keyword">if</span><span class="token punctuation">(</span>sc<span class="token punctuation">.</span>set <span class="token keyword">is</span> MutableSet<span class="token punctuation">)</span>
    sc<span class="token punctuation">.</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>

<span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"<span class="token interpolation"><span class="token delimiter variable">${</span>sc<span class="token punctuation">.</span>list<span class="token delimiter variable">}</span></span>, <span class="token interpolation"><span class="token delimiter variable">${</span>sc<span class="token punctuation">.</span>set<span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span>
</code></pre>
<pre><code>这会打印出什么？
a) [1, 2, 3], [1, 2, 3]
b) [1, 2, 3, 4], [1, 2, 3, 4]
c) UnsupportedOperationException
d) 这破代码根本没法通过编译
</code></pre><p>上一题的答案：c</p>
<p>这里有两个 <code>backing field</code>，<code>Named</code> 类的那个 <code>get</code> 方法操纵了父类的 <code>backing field</code>，<code>set</code> 方法操纵的是自己的 <code>backing field</code>。</p>
<p>解决方法：</p>
<pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> Person<span class="token operator">:</span> <span class="token function">Named</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">var</span> name<span class="token operator">:</span> String<span class="token operator">?</span>
        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span>name
        <span class="token keyword">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">super</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Mr <span class="token interpolation variable">$value</span>"</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="最小值-MinInt"><a href="#最小值-MinInt" class="headerlink" title="最小值 ~ MinInt"></a>最小值 ~ MinInt</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">printInt</span><span class="token punctuation">(</span>n<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">printInt</span><span class="token punctuation">(</span><span class="token operator">-</span>2_147_483_648<span class="token punctuation">.</span><span class="token function">inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<pre><code>这会打印出什么？
a) -2147483647
b) -2147483649
c)  2147483647
d) 以上答案都不对
</code></pre><p>上一题的答案：d</p>
<p><code>sc.set</code> 有一个自定义 <code>getter</code>，编译器没法判断这个 <code>getter</code> 返回的是否是同一个对象，所以无法进行智能转换（smart cast）。</p>
<p>思考：这时候别声明只有 <code>getter</code> 的属性，声明有 <code>backing field</code> 的属性就好。</p>
<h2 id="人类衰退之后-Population-To-Mars"><a href="#人类衰退之后-Population-To-Mars" class="headerlink" title="人类衰退之后 ~ Population To Mars"></a>人类衰退之后 ~ Population To Mars</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> <span class="token function">Population</span><span class="token punctuation">(</span><span class="token keyword">var</span> cities<span class="token operator">:</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Int<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">val</span> 帝都 <span class="token keyword">by</span> cities
  <span class="token keyword">val</span> 魔都 <span class="token keyword">by</span> cities
  <span class="token keyword">val</span> 妖都 <span class="token keyword">by</span> cities
<span class="token punctuation">}</span>

<span class="token keyword">val</span> population <span class="token operator">=</span> <span class="token function">Population</span><span class="token punctuation">(</span><span class="token function">mapOf</span><span class="token punctuation">(</span>
    <span class="token string">"帝都"</span> <span class="token keyword">to</span> 864_816<span class="token punctuation">,</span>
    <span class="token string">"魔都"</span> <span class="token keyword">to</span> 413_782<span class="token punctuation">,</span>
    <span class="token string">"妖都"</span> <span class="token keyword">to</span> 43_005
<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">// 许多年过去了，地球毁灭了，只有少数幸存者抵达了火星（大吉大利今晚吃鸡）！</span>
population<span class="token punctuation">.</span>cities <span class="token operator">=</span> <span class="token function">emptyMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token function">with</span><span class="token punctuation">(</span>population<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"$帝都; $魔都; $妖都"</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre>
<pre><code>这会打印出什么？
a) 0; 0; 0
b) 864816; 413782; 43005
c) NullPointerException
d) NoSuchElementException
</code></pre><p>上一题的答案：d</p>
<p>破代码没法通过编译。实际的求值顺序是：<code>-(2_147_483_648.inc())</code>，这TM是个 <code>Long</code>。这个一元操作符的优先级比普通方法调用低。</p>
<h2 id="反物质-AntiMatter"><a href="#反物质-AntiMatter" class="headerlink" title="反物质 ~ AntiMatter"></a>反物质 ~ AntiMatter</h2><pre class=" language-kotlin"><code class="language-kotlin">operator <span class="token keyword">fun</span> Nothing<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">not</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> Unit
operator <span class="token keyword">fun</span> Unit<span class="token punctuation">.</span><span class="token function">not</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">null</span>

<span class="token keyword">val</span> foo <span class="token operator">=</span> <span class="token keyword">null</span>

<span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">!!</span><span class="token operator">!!</span><span class="token operator">!</span>foo<span class="token operator">!!</span><span class="token operator">!!</span><span class="token punctuation">)</span>
</code></pre>
<pre><code>这会打印出什么？
a) null
b) kotlin.Unit
c) KotlinNullPointerException
d) 这破代码根本没法通过编译
</code></pre><p>上一题的答案：b</p>
<p>用于委托代理的那个 <code>Map</code> 被保存在了一个 <code>private final</code> 的 <code>field</code> 里面，正常手段没法赋新值。</p>
<p>本题的答案：d</p>
<p><code>null</code> 的类型是 <code>Nothing?</code>（而且是这个类型的唯一值）。<code>***!!</code> 这个非空断言比 <code>not()</code> 的优先级要高，所以 <code>foo!!!!</code> 的类型是 <code>Nothing</code>，<code>Nothing</code> 是所有类型的子类型，所以编译器没法判断该调用哪个扩展方法。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这些辣鸡代码，别学。</p>
<img src="/2017/12/28/kotlin-puzzlers/20171206120238.jpg" alt="辣鸡Kotlin" title="辣鸡Kotlin">
<img src="/2017/12/28/kotlin-puzzlers/3274183514325243.jpg" alt="芳文社天下第一" title="芳文社天下第一">]]></content>
      
        
        <tags>
            
            <tag> Kotlin </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2017-10-18：最近观察到的Kotlin的华点]]></title>
      <url>/2017/10/18/huadian/</url>
      <content type="html"><![CDATA[<p>每次有零零碎碎的新东西都发篇文章觉得不是很好，这里当作记录贴好了，不定期更新。封面换成了艾拉酱，真好啊~真好啊~ ヾ(≧▽≦*)o<br><a id="more"></a><br>使用的 Kotlin 版本为 1.1.51。</p>
<h1 id="一件Java能做但是Kotlin不能做的事情"><a href="#一件Java能做但是Kotlin不能做的事情" class="headerlink" title="一件Java能做但是Kotlin不能做的事情"></a>一件Java能做但是Kotlin不能做的事情</h1><p>在Codewars上刷题的时候发现的，本来这网站上面的Kotlin题就少，而且还有大把大把不会写，能玩的就更少了。这种题目不调戏一下冰酱就可惜了。具体是<a href="http://www.codewars.com/kata/tricky-kotlin-number-3-define-a-function" target="_blank" rel="external">这道题</a>。</p>
<p>这题要求你代码中不能出现<code>fun</code>、<code>{</code>以及<code>}</code>的情况下让定义一个拼接两个字符串的函数。这个要求等同于禁止你使用lambda表达式、函数声明，并且限制你仅用一个表达式完成任务（根据我的理解，是这样的没错）。</p>
<p>那我们来找找有什么现成的有<code>invoke()</code>方法的东西吧。首先想到了反射，但是反射那家伙需要传入接收者作为第一个参数，rua~。既然反射不行，啊，有个更好的东西，看起来完美符合需求。</p>
<p>马上写好代码准备吊打冰酱，然后就是喜闻乐见的辣鸡Kotlin时间，代码如下：</p>
<pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> concatString <span class="token operator">=</span> MethodHandles<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findVirtual</span><span class="token punctuation">(</span>String<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">,</span>
            <span class="token string">"concat"</span><span class="token punctuation">,</span> MethodType<span class="token punctuation">.</span><span class="token function">methodType</span><span class="token punctuation">(</span>String<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">,</span> String<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">val</span> str <span class="token operator">=</span> <span class="token function">concatString</span><span class="token punctuation">(</span><span class="token string">"我永远喜欢"</span><span class="token punctuation">,</span> <span class="token string">"珂朵莉"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> String <span class="token comment" spellcheck="true">// Boom！</span>
</code></pre>
<p>然后在Java里写下同样的代码进行测试，嗯，果然是辣鸡Kotlin。</p>
<p>炸裂原因是Kotlin不支持所谓的签名多态性（signature polymorphism），从编译出来的字节码可以看得出来：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// kotlin</span>
INVOKEVIRTUAL java<span class="token operator">/</span>lang<span class="token operator">/</span>invoke<span class="token operator">/</span>MethodHandle<span class="token punctuation">.</span><span class="token function">invoke</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>Ljava<span class="token operator">/</span>lang<span class="token operator">/</span>Object<span class="token punctuation">;</span><span class="token punctuation">)</span>Ljava<span class="token operator">/</span>lang<span class="token operator">/</span>Object<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// java</span>
INVOKEVIRTUAL java<span class="token operator">/</span>lang<span class="token operator">/</span>invoke<span class="token operator">/</span>MethodHandle<span class="token punctuation">.</span><span class="token function">invoke</span> <span class="token punctuation">(</span>Ljava<span class="token operator">/</span>lang<span class="token operator">/</span>String<span class="token punctuation">;</span>Ljava<span class="token operator">/</span>lang<span class="token operator">/</span>String<span class="token punctuation">;</span><span class="token punctuation">)</span>Ljava<span class="token operator">/</span>lang<span class="token operator">/</span>String<span class="token punctuation">;</span>
</code></pre>
<p>运行时要成功调用该方法的话，字节码中的参数与返回值类型必须与运行时<code>MethodHandle</code>所代表的实际的方法类型一致，否则会抛出<code>WrongMethodTypeException</code>。上面那段Kotlin代码运行时就会抛出这个异常，异常信息为<code>cannot convert MethodHandle(String,String)String to (Object[])Object</code>，正好与上面的字节码相对应。嗯就是这样。</p>
<p>Kotlin编译器现在还不能支持多态签名，而且这将持续很长一段时间（官方人员说了，1.2版本也不会实现这项功能）。</p>
<p>解决方法：辣鸡Kotlin。</p>
<h1 id="2017-10-10"><a href="#2017-10-10" class="headerlink" title="2017-10-10"></a>2017-10-10</h1><p>最近翻看以前写的旧代码，发现由于Kotlin及其IDEA插件版本更新了，静态检查工具功能增强，检出了一些令人窒息的代码（例如 Check for instance is always ‘true’）。然后我在查看这些乱七八糟的代码时发现了两个问题。</p>
<h2 id="编译器生成了无用的字节码"><a href="#编译器生成了无用的字节码" class="headerlink" title="编译器生成了无用的字节码(?)"></a>编译器生成了无用的字节码(?)</h2><p>把问题单独抽出来就像是这样：</p>
<pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> A<span class="token operator">&lt;</span>T <span class="token operator">:</span> Any<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">val</span> <span class="token keyword">data</span><span class="token operator">:</span> T<span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token function">B</span><span class="token punctuation">(</span><span class="token keyword">val</span> string<span class="token operator">:</span> String<span class="token punctuation">)</span>

<span class="token keyword">fun</span> <span class="token function">test</span><span class="token punctuation">(</span>a<span class="token operator">:</span> A<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    a<span class="token punctuation">.</span>data <span class="token keyword">as</span> B   <span class="token comment" spellcheck="true">// 注意这行对应的字节码</span>
    a<span class="token punctuation">.</span>data<span class="token punctuation">.</span>string <span class="token comment" spellcheck="true">// 这里 a.data 有提示 Smart cast to B</span>
<span class="token punctuation">}</span>
</code></pre>
<p>然后看看编译出的字节码里面都有啥：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 以上省略</span>
   L1
    LINENUMBER <span class="token number">5</span> L1
    ALOAD <span class="token number">0</span>
    INVOKEVIRTUAL A<span class="token punctuation">.</span><span class="token function">getData</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>Ljava<span class="token operator">/</span>lang<span class="token operator">/</span>Object<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// a.data</span>
    DUP
    IFNONNULL L2   <span class="token comment" spellcheck="true">// &lt;============================ 这里进行判空</span>
    NEW <span class="token class-name">kotlin</span><span class="token operator">/</span>TypeCastException
    DUP
    LDC <span class="token string">"null cannot be cast to non-null type B"</span>
    INVOKESPECIAL kotlin<span class="token operator">/</span>TypeCastException<span class="token punctuation">.</span>&lt;init<span class="token operator">></span> <span class="token punctuation">(</span>Ljava<span class="token operator">/</span>lang<span class="token operator">/</span>String<span class="token punctuation">;</span><span class="token punctuation">)</span>V
    ATHROW
   L2
    CHECKCAST B    <span class="token comment" spellcheck="true">// &lt;============================ 不为空则进行类型转换</span>
    POP
   L3
<span class="token comment" spellcheck="true">// 以下省略</span>
</code></pre>
<p>大致内容就是判断 <code>a.data</code> 是否为 <code>null</code>，如果是 <code>null</code> 就 <code>throw TypeCastException(&quot;null cannot be cast to non-null type B&quot;)</code>。然而根据 <code>A</code> 这个类的定义，其属性 <code>data</code> 必定是非空的。对非空属性进行 null check 岂不是多余？难道说编译器太傻，在分析这种操作时不知道 <code>a.data</code> 是非空的？</p>
<p>解决方法：加个问号，如下所示：</p>
<pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">test</span><span class="token punctuation">(</span>a<span class="token operator">:</span> A<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    a<span class="token punctuation">.</span>data <span class="token keyword">as</span> B<span class="token operator">?</span>   <span class="token comment" spellcheck="true">// 加了个问号，变成了B?</span>
    a<span class="token punctuation">.</span>data<span class="token punctuation">.</span>string  <span class="token comment" spellcheck="true">// 注意这里 a.data 同样有提示 Smart cast to B</span>
<span class="token punctuation">}</span>
</code></pre>
<p>这时候字节码就是这样的：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 以上省略</span>
   L1
    LINENUMBER <span class="token number">5</span> L1
    ALOAD <span class="token number">0</span>
    INVOKEVIRTUAL A<span class="token punctuation">.</span><span class="token function">getData</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>Ljava<span class="token operator">/</span>lang<span class="token operator">/</span>Object<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// a.data</span>
    CHECKCAST B    <span class="token comment" spellcheck="true">// &lt;============================ 直接进行类型转换</span>
    POP
   L2
<span class="token comment" spellcheck="true">// 以下省略</span>
</code></pre>
<p>这回就没有多余的判空处理了。但是注意代码中的 <code>a.data.string</code>，IDE提示 <code>a.data</code> 能够 Smart cast to B。咦编译器还是蛮聪明的呢！</p>
<h2 id="检查工具提示可对代码进行负优化"><a href="#检查工具提示可对代码进行负优化" class="headerlink" title="检查工具提示可对代码进行负优化(?)"></a>检查工具提示可对代码进行负优化(?)</h2><p>这个问题单独抽出来就像这样：</p>
<pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> A
<span class="token keyword">class</span> B <span class="token punctuation">{</span>
    <span class="token keyword">fun</span> <span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> A <span class="token operator">=</span> <span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">test</span><span class="token punctuation">(</span>some<span class="token operator">:</span> Any<span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">:</span> A <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>some <span class="token keyword">is</span> B<span class="token punctuation">)</span> some<span class="token punctuation">.</span><span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 注意这行</span>
<span class="token punctuation">}</span>
</code></pre>
<p>然后你可以看到，IDE提示你可以 Replace ‘if’ expression with elvis experssion。如果你让IDE帮你优化，就变成了这样：</p>
<pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">test</span><span class="token punctuation">(</span>some<span class="token operator">:</span> Any<span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">:</span> A <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>some <span class="token keyword">as</span><span class="token operator">?</span> B<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?:</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// WTF???</span>
<span class="token punctuation">}</span>
</code></pre>
<p>不知道你们是怎么想的，至少对于我来说可读性下降，而且很明显生成的字节码也变复杂了。明显是负优化，吧？</p>
<p>解决方法：<code>@Suppress(&quot;IfThenToElvis&quot;)</code></p>
]]></content>
      
        
        <tags>
            
            <tag> Kotlin </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于此博客，以及博主，还有那些七七八八的事]]></title>
      <url>/2017/04/27/about/</url>
      <content type="html"><![CDATA[<h1 id="一些碎碎念"><a href="#一些碎碎念" class="headerlink" title="一些碎碎念"></a>一些碎碎念</h1><p>讲道理，我搭好 Hexo 才发现，如果使用 Jekyll 的话，只要将页面源码 Push 到 Github 上，是可以自动生成页面并发布的。<br><a id="more"></a><br>全栽在 CI 上了（用的是 AppVeyor），首先是太久没用 Git，忘记子模块怎么用了，坑了好久。之后是 Git 一些操作重定向 stdout 到 stderr 导致 PowerShell ISE 报错，于是 CI 那边就挂掉了。然后是 Gitlab 的神奇 Bug，一次 Push 让 CI 那边连续 Build 了 5 次……</p>
<p>于是 3 天的人生就浪费掉了。<del>其实如果不搞持续集成的话就没那么多事。</del>虽然说结果都一样，但是总感觉有那么点不爽，我特么怎么就选了 Hexo 呢。越想越恼火。不排除以后换成 Jekyll 的可能性，不过主题一定是要换的。</p>
<h1 id="关于博客-The-History-of-RenTou"><a href="#关于博客-The-History-of-RenTou" class="headerlink" title="关于博客 ~ The History of RenTou"></a>关于博客 ~ The History of RenTou</h1><blockquote>
<p>Q：这个博客的名字“人头会社”有什么含义么？</p>
<p>A：没啥，这个只是从我的 QQ 空间那里拿来的（逃</p>
</blockquote>
<p>说实话我还专门上了一下万年没打理的 QQ 空间考究了一番，发现原来我的 QQ 空间是叫做 “反补课基地” 的（没错，我忘了）。初中时期补课之风盛行，原本每周都有的双休，补得只剩半天假期。唔，这个 “反补课基地” 就是当时中二病发作的产物。</p>
<p>所谓 “人头”，并不是位于身体最上方部位、由人的颅骨支撑的那个圆滚滚的东西<del>（对不起让你们失望了）</del>，而是挂在小卖部外墙上的衣服或杂物。由于当时正值放假前夜，月黑风高，去买零食的3人误认为是人头。于是这项活动「在放假的前一天晚上，前往小卖部采购以庆祝放假」便固定了下来，美名其曰「人头节」，随后便有了「人头会」，可喜可贺。</p>
<p>虽然人头会仅3名成员，但经常与班上其他同学一起庆祝人头节，所谓“独乐乐不如众乐乐”。这被班上另一邪恶组织「精神病院」的院长大人看到了，院长害怕事情变得一发不可收拾，便对人头会施压，试图使其解散。坚毅的人头会成员不惧怕任何威胁，事实证明，看似实力强大的精神病院（十几名成员）实际上却是一盘散沙。高贵的人头会有共同的信仰（放假），有定期的活动（人头节），具有强大的精神凝聚力，不是无所事事的精神病院所能比拟的。</p>
<p>嘻嘻。院长大人别打我~~</p>
<h1 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h1><p>唔，感觉没啥好说的呢。</p>
<p><del>人头会社三元老之一，精神病院第13号床位所有者。</del></p>
<p><del>不务正业的辣鸡。</del></p>
<p>噫，就这样。</p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>这个博客是有评论系统的，看不到的话那应该是被墙了，请使用科学姿势查看。（或者等我换成友言（懒癌不允许我这么做（不！</p>
]]></content>
      
        
        <tags>
            
            <tag> Others </tag>
            
        </tags>
        
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[about]]></title>
      <url>/about/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[categories]]></title>
      <url>/categories/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[tags]]></title>
      <url>/tags/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[timeline]]></title>
      <url>/timeline/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
