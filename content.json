{"meta":{"title":"萌夜雀的人头会社","subtitle":null,"description":"要和谐, 要有爱","author":"Dexlind","url":"https://lgzh1215.github.io"},"pages":[{"title":"about","date":"2017-05-28T18:28:59.000Z","updated":"2017-10-11T03:56:51.032Z","comments":true,"path":"about/index.html","permalink":"https://lgzh1215.github.io/about/index.html","excerpt":"","text":"","raw":null,"content":null},{"title":"categories","date":"2017-04-18T17:12:52.000Z","updated":"2017-10-11T03:56:51.032Z","comments":true,"path":"categories/index.html","permalink":"https://lgzh1215.github.io/categories/index.html","excerpt":"","text":"","raw":null,"content":null},{"title":"tags","date":"2017-10-11T03:56:51.048Z","updated":"2017-10-11T03:56:51.048Z","comments":true,"path":"tags/index.html","permalink":"https://lgzh1215.github.io/tags/index.html","excerpt":"","text":"","raw":null,"content":null}],"posts":[{"title":"最近注意到的Kotlin的华点","slug":"huadian","date":"2017-10-10T14:54:48.000Z","updated":"2017-10-11T03:56:51.032Z","comments":true,"path":"2017/10/10/huadian/","link":"","permalink":"https://lgzh1215.github.io/2017/10/10/huadian/","excerpt":"最近翻看以前写的旧代码，发现由于Kotlin及其IDEA插件版本更新了，静态检查工具功能增强，检出了一些令人窒息的代码（例如 Check for instance is always ‘true’）。然后我在查看这些乱七八糟的代码时发现了两个问题。","text":"最近翻看以前写的旧代码，发现由于Kotlin及其IDEA插件版本更新了，静态检查工具功能增强，检出了一些令人窒息的代码（例如 Check for instance is always ‘true’）。然后我在查看这些乱七八糟的代码时发现了两个问题。使用的 Kotlin 版本为 1.1.51。 编译器生成了无用的字节码(?)把问题单独抽出来就像是这样： class A&lt;T : Any>(val data: T) class B(val string: String) fun test(a: A&lt;*>) { a.data as B // 注意这行对应的字节码 a.data.string // 这里 a.data 有提示 Smart cast to B } 然后看看编译出的字节码里面都有啥： // 以上省略 L1 LINENUMBER 5 L1 ALOAD 0 INVOKEVIRTUAL A.getData ()Ljava/lang/Object; // a.data DUP IFNONNULL L2 // &lt;============================ 这里进行判空 NEW kotlin/TypeCastException DUP LDC \"null cannot be cast to non-null type B\" INVOKESPECIAL kotlin/TypeCastException.&lt;init> (Ljava/lang/String;)V ATHROW L2 CHECKCAST B // &lt;============================ 不为空则进行类型转换 POP L3 // 以下省略 大致内容就是判断 a.data 是否为 null，如果是 null 就 throw TypeCastException(&quot;null cannot be cast to non-null type B&quot;)。然而根据 A 这个类的定义，其属性 data 必定是非空的。对非空属性进行 null check 岂不是多余？难道说编译器太傻，在分析这种操作时不知道 a.data 是非空的？ 解决方法：加个问号，如下所示： fun test(a: A&lt;*>) { a.data as B? // 加了个问号，变成了B? a.data.string // 注意这里 a.data 同样有提示 Smart cast to B } 这时候字节码就是这样的： // 以上省略 L1 LINENUMBER 5 L1 ALOAD 0 INVOKEVIRTUAL A.getData ()Ljava/lang/Object; // a.data CHECKCAST B // &lt;============================ 直接进行类型转换 POP L2 // 以下省略 这回就没有多余的判空处理了。但是注意代码中的 a.data.string，IDE提示 a.data 能够 Smart cast to B。咦编译器还是蛮聪明的呢！ 检查工具提示可对代码进行负优化(?)这个问题单独抽出来就像这样： class A class B { fun getA(): A = TODO() } fun test(some: Any?): A { return if (some is B) some.getA() else A() // 注意这行 } 然后你可以看到，IDE提示你可以 Replace ‘if’ expression with elvis experssion。如果你让IDE帮你优化，就变成了这样： fun test(some: Any?): A { return (some as? B)?.getA() ?: A() // WTF??? } 不知道你们是怎么想的，至少对于我来说可读性下降，而且很明显生成的字节码也变复杂了。明显是负优化，吧？ 解决方法：@Suppress(&quot;IfThenToElvis&quot;)","raw":null,"content":null,"categories":[],"tags":[{"name":"Kotlin","slug":"Kotlin","permalink":"https://lgzh1215.github.io/tags/Kotlin/"}]},{"title":"关于此博客，以及博主，还有那些七七八八的事","slug":"Readme-About-and-Others","date":"2017-04-27T03:32:52.000Z","updated":"2017-10-11T03:56:51.032Z","comments":true,"path":"2017/04/27/Readme-About-and-Others/","link":"","permalink":"https://lgzh1215.github.io/2017/04/27/Readme-About-and-Others/","excerpt":"一些碎碎念讲道理，我搭好 Hexo 才发现，如果使用 Jekyll 的话，只要将页面源码 Push 到 Github 上，是可以自动生成页面并发布的。","text":"一些碎碎念讲道理，我搭好 Hexo 才发现，如果使用 Jekyll 的话，只要将页面源码 Push 到 Github 上，是可以自动生成页面并发布的。全栽在 CI 上了（用的是 AppVeyor），首先是太久没用 Git，忘记子模块怎么用了，坑了好久。之后是 Git 一些操作重定向 stdout 到 stderr 导致 PowerShell ISE 报错，于是 CI 那边就挂掉了。然后是 Gitlab 的神奇 Bug，一次 Push 让 CI 那边连续 Build 了 5 次…… 于是 3 天的人生就浪费掉了。其实如果不搞持续集成的话就没那么多事。虽然说结果都一样，但是总感觉有那么点不爽，我特么怎么就选了 Hexo 呢。越想越恼火。不排除以后换成 Jekyll 的可能性，不过主题一定是要换的。 关于博客 ~ The History of RenTou Q：这个博客的名字“人头会社”有什么含义么？ A：没啥，这个只是从我的 QQ 空间那里拿来的（逃 说实话我还专门上了一下万年没打理的 QQ 空间考究了一番，发现原来我的 QQ 空间是叫做 “反补课基地” 的（没错，我忘了）。初中时期补课之风盛行，原本每周都有的双休，补得只剩半天假期。唔，这个 “反补课基地” 就是当时中二病发作的产物。 所谓 “人头”，并不是位于身体最上方部位、由人的颅骨支撑的那个圆滚滚的东西（对不起让你们失望了），而是挂在小卖部外墙上的衣服或杂物。由于当时正值放假前夜，月黑风高，去买零食的3人误认为是人头。于是这项活动「在放假的前一天晚上，前往小卖部采购以庆祝放假」便固定了下来，美名其曰「人头节」，随后便有了「人头会」，可喜可贺。 虽然人头会仅3名成员，但经常与班上其他同学一起庆祝人头节，所谓“独乐乐不如众乐乐”。这被班上另一邪恶组织「精神病院」的院长大人看到了，院长害怕事情变得一发不可收拾，便对人头会施压，试图使其解散。坚毅的人头会成员不惧怕任何威胁，事实证明，看似实力强大的精神病院（十几名成员）实际上却是一盘散沙。高贵的人头会有共同的信仰（放假），有定期的活动（人头节），具有强大的精神凝聚力，不是无所事事的精神病院所能比拟的。 嘻嘻。院长大人别打我~~ 关于我唔，感觉没啥好说的呢。 人头会社三元老之一，精神病院第13号床位所有者。 不务正业的辣鸡。 噫，就这样。 其他这个博客是有评论系统的，看不到的话那应该是被墙了，请使用科学姿势查看。（或者等我换成友言（懒癌不允许我这么做（不！","raw":null,"content":null,"categories":[],"tags":[{"name":"Others","slug":"Others","permalink":"https://lgzh1215.github.io/tags/Others/"}]}]}